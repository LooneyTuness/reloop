#!/usr/bin/env node

/**
 * Production Environment Setup Script
 *
 * This script helps you set up the production environment variables
 * to ensure sellers log into the production database instead of the old reloop database.
 */

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
};

function log(message, color = "reset") {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logError(message) {
  log(`❌ ${message}`, "red");
}

function logSuccess(message) {
  log(`✅ ${message}`, "green");
}

function logWarning(message) {
  log(`⚠️  ${message}`, "yellow");
}

function logInfo(message) {
  log(`ℹ️  ${message}`, "blue");
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  log("🔧 Production Environment Setup", "bright");
  log("================================", "bright");
  log("");

  logWarning("This script will help you configure the production database.");
  logInfo("You'll need your production Supabase project credentials.");
  log("");

  // Check if .env.local already exists
  const envPath = path.join(__dirname, ".env.local");
  if (fs.existsSync(envPath)) {
    const overwrite = await question(
      "⚠️  .env.local already exists. Overwrite? (y/N): "
    );
    if (overwrite.toLowerCase() !== "y" && overwrite.toLowerCase() !== "yes") {
      logInfo("Setup cancelled.");
      rl.close();
      return;
    }
  }

  log("");
  log("📋 Please provide your production database credentials:", "cyan");
  log("");

  const supabaseUrl = await question(
    "Production Supabase URL (https://your-project-id.supabase.co): "
  );
  const supabaseAnonKey = await question("Production Supabase Anon Key: ");
  const serviceRoleKey = await question("Production Service Role Key: ");
  const appUrl = await question(
    "Production App URL (https://your-domain.com): "
  );
  const emailUser = await question(
    "Production Email User (your-email@gmail.com): "
  );
  const emailPassword = await question("Production Email App Password: ");

  // Validate inputs
  if (!supabaseUrl || !supabaseAnonKey || !serviceRoleKey || !appUrl) {
    logError("Missing required fields. Setup cancelled.");
    rl.close();
    return;
  }

  if (!supabaseUrl.includes("supabase.co")) {
    logError(
      "Invalid Supabase URL format. Should be: https://your-project-id.supabase.co"
    );
    rl.close();
    return;
  }

  // Create .env.local content
  const envContent = `# Production Environment Variables
# Generated by setup-production-env.js

# Supabase Configuration (REQUIRED)
NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${supabaseAnonKey}
SUPABASE_SERVICE_ROLE_KEY=${serviceRoleKey}

# Application Configuration
NEXT_PUBLIC_WAITLIST_ONLY=false
NEXT_PUBLIC_APP_URL=${appUrl}
NEXT_PUBLIC_SITE_URL=${appUrl}

# Email Notifications (Production)
EMAIL_USER=${emailUser}
EMAIL_APP_PASSWORD=${emailPassword}

# PostHog Analytics (Optional)
NEXT_PUBLIC_POSTHOG_KEY=your_posthog_key
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# Environment
NODE_ENV=production
`;

  try {
    fs.writeFileSync(envPath, envContent);
    logSuccess("✅ .env.local file created successfully!");
    log("");
    logInfo("Next steps:");
    logInfo("1. Restart your development server: npm run dev");
    logInfo("2. Test the connection: node test-production-db.js");
    logInfo("3. Verify sellers can log in with the production database");
    log("");
    logSuccess("🎉 Production environment configured!");
  } catch (error) {
    logError(`Failed to create .env.local: ${error.message}`);
  }

  rl.close();
}

main().catch((error) => {
  logError(`Setup failed: ${error.message}`);
  rl.close();
  process.exit(1);
});
